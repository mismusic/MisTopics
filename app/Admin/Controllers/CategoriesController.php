<?php

namespace App\Admin\Controllers;

use App\Common\Utils\Utils;
use App\Models\Category;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Route;

class CategoriesController extends AdminController
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = '分类';

    public function index(Content $content)
    {
        return $content->title('分类')
            ->description('列表')
            ->body(Category::tree());
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(Category::findOrFail($id));

        $show->field('id', __('ID'));
        $show->field('pid', __('Pid'));
        $show->field('name', __('分类名'));
        $show->field('description', __('分类描述'));
        $show->field('sort', __('分类排序'));
        $show->field('created_at', __('创建时间'));
        $show->field('updated_at', __('更新时间'));

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Category());

        $routeName = Route::currentRouteName(); // 获取当前路由名
        $currentId = request()->route('category'); // 获取当前分类id
        $categories = Category::all()->toArray();
        $data = collect(Utils::getTreeDataIteration($categories))
            ->pluck('name', 'id')
            ->prepend('顶级分类', 0);
        $nameRule = [
            'required',
            'regex:/^[\x{4e00}-\x{9fa5}a-zA-Z0-9\-_\.]+$/u',
            'between:1,25',
        ];
        $nameUnique = '';
        $pidRule = '';
        switch ($routeName) {
            case admin_route_prefix('categories.create'):
                $categories = $data;
                break;
            case admin_route_prefix('categories.edit'):
                $cateSubIds = Utils::getSubTreeIds($categories, $currentId);
                $categories = $data->except($cateSubIds);
                break;
            case admin_route_prefix('categories.store'):
                $nameUnique = 'unique:categories,name';
                $ids = array_merge([0], array_keys($data->toArray()));
                $pidRule = [
                    'required',
                    'integer',
                    function ($attribute, $value, $fail) use ($ids) {
                        if (! in_array(request()->input('pid'), $ids)) {
                            $fail('该pid不存在');
                        }
                    },
                ];
                break;
            case admin_route_prefix('categories.update'):
                $nameUnique = 'unique:categories,name,' . $currentId;
                $cateSubIds = Utils::getSubTreeIds($categories, $currentId);
                $ids = $data->except($cateSubIds)->keys()->toArray();
                $pidRule = [
                    'required',
                    'integer',
                    function ($attribute, $value, $fail) use ($ids) {
                        if (! in_array(request()->input('pid'), $ids)) {
                            $fail('该pid不存在，或是pid等于当前id 或 子id');
                        }
                    },
                ];
                break;
        }
        array_push($nameRule, $nameUnique);
        $form->select('pid', __('父分类ID'))->options($categories)
            ->rules($pidRule);
        $form->text('name', __('分类名'))->rules($nameRule);
        $form->text('description', __('分类描述'));
        $form->text('sort', __('分类排序'))->setWidth(2)->rules([
            'required',
            'integer',
        ]);

        return $form;
    }

    public function create(Content $content)
    {
        Cache::forget('sharedCategories');  // 删掉分类的缓存
        return parent::create($content); // TODO: Change the autogenerated stub
    }

    public function update($id)
    {
        Cache::forget('sharedCategories');  // 删掉分类的缓存
        return parent::update($id);
    }

    public function destroy($id)
    {
        $data = [
            'status' => true,
            'message' => '删除成功',
        ];
        $categories = Category::all();
        $ids = Utils::getSubTreeIds($categories->toArray(), $id);
        array_shift($ids);
        $category = Category::find($id);
        if (! $category) {
            $data['status'] = false;
            $data['message'] = '该分类id不存在';
        } else if ($ids) {
            $data['status'] = false;
            $data['message'] = '该分类下面有子分类，不能删除';
        } else {
            $category->delete();  // 删除该分类数据
            Cache::forget('sharedCategories');  // 删掉分类的缓存
        }
        return $data;
    }

}
